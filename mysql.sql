DROP DATABASE IF EXISTS db;
CREATE DATABASE db;
USE db;

CREATE TABLE DHMOTHS(
	DHM_NAME VARCHAR(20) DEFAULT "ABAPTISTO",
	DHM_SURNAME VARCHAR(30) NOT NULL,
	AMKA INT NOT NULL,
	PRIMARY KEY (AMKA),
	#Foreign key of MERIDA
	DHM_MER_ID INT(5) NOT NULL,
	FOREIGN KEY (DHM_MER_ID) REFERENCES MER_ID
	);
    
CREATE TABLE YPHRESIA(
	YP_TITLE char(25) NOT NULL,
	YP_DAYS INT NOT NULL,
	YP_ID INT(3) NOT NULL,
	PRIMARY KEY (YP_ID)
	);
    
CREATE TABLE MERIDA(
	MER_DATE DATE NOT NULL,
	MER_POP INT,
	MER_ID INT(5) NOT NULL,
	PRIMARY KEY (MER_ID)
	);
	
#New tables needed for the 4th part of the exercise.

CREATE TABLE ETAIRIA(
	ET_NAME VARCHAR(30) NOT NULL,
	ET_POP INT,
	ET_ID VARCHAR(3) NOT NULL,
	PRIMARY KEY (ET_ID),
	#Foreign key of DHMOTHS:
	ET_AMKA INT NOT NULL,
	FOREIGN KEY (ET_AMKA) REFERENCES AMKA
	);

CREATE TABLE MANAGER(
	MAN_NAME VARCHAR(20) NOT NULL,
	MAN_SURNAME VARCHAR(30) NOT NULL,
	MAN_ID INT(4) NOT NULL,
	PRIMARY KEY (MAN_ID),
	#Foreign key of ETAIRIA:
	MAN_ET_ID VARCHAR(3) NOT NULL,
	FOREIGN KEY (MAN_ET_ID) REFERENCES ET_ID
	);

CREATE TABLE OFFICE(
	OFF_NAME VARCHAR(30),
	OFF_FLOOR INT(2),
	OFF_ID VARCHAR(3) NOT NULL,
	PRIMARY KEY (OFF_ID),
	#Foreign key of ETAIRIA:
	OFF_ET_ID VARCHAR(3) NOT NULL,
	FOREIGN KEY (OFF_ET_ID) REFERENCES ET_ID
	);

CREATE TABLE REGISTRY(
	R_TITLE VARCHAR(30) NOT NULL,
	R_POP INT,
	R_ID INT NOT NULL,
	PRIMARY KEY (R_ID),
	#Foreign key of POLICE
	R_P_ID INT(4) NOT NULL,
	FOREIGN KEY (R_P_ID) REFERENCES P_ID
	);

CREATE TABLE POLICE(
	P_NAME VARCHAR(20) NOT NULL,
	P_SURNAME VARCHAR(30) NOT NULL,
	P_ID INT(4),
	PRIMARY KEY (P_ID)
	);
    
#Relationship TABLES

#Relationship between DHMOTHS <-> REGISTRY
CREATE TABLE HAS(
	HAS_AMKA INT NOT NULL,
	HAS_R_ID INT NOT NULL,
	PRIMARY KEY (HAS_AMKA, HAS_R_ID),
	FOREIGN KEY (HAS_AMKA) REFERENCES AMKA,
	FOREIGN KEY (HAS_R_ID) REFERENCES R_ID
	);

#Relationship between DHMOTHS <-> YPHRESIA
CREATE TABLE given(
	GIVEN_YP_ID INT(3) NOT NULL,
	GIVEN_AMKA INT NOT NULL,
	PRIMARY KEY (GIVEN_YP_ID, GIVEN_AMKA),
	FOREIGN KEY (GIVEN_YP_ID) REFERENCES YP_ID,
	FOREIGN KEY (GIVEN_AMKA) REFERENCES AMKA
	);
